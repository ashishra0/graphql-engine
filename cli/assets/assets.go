// Code generated by go-bindata.
// sources:
// assets/unversioned/console.html
// assets/v1.0-alpha/console.html
// assets/v1.0/console.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsUnversionedConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x8f\xdb\x36\x10\xbd\xef\xaf\x18\xb0\x28\x72\xa9\x48\x27\x0d\xd0\x40\xb6\x16\x08\x1a\x14\x2d\xda\x02\x01\x92\xed\x75\xc1\xa5\x46\xd2\x6c\x28\x52\xe5\xd0\xf6\x3a\x86\xff\x7b\xa1\x6f\xd9\xbb\xcd\xa6\x45\xe0\x0b\xf9\xe6\x8b\xef\x71\x38\xf2\xa6\x8a\xb5\x05\xab\x5d\x99\x09\x74\xc9\x96\xc5\xf5\x15\xc0\xa6\x42\x9d\xb7\x0b\x80\x8d\x25\xf7\x09\x02\xda\x4c\x90\xf1\x4e\x40\x3c\x34\x98\x09\xaa\x75\x89\xaa\x71\xa5\x80\x2a\x60\x91\x89\x2a\xc6\x86\x53\xa5\xca\xa0\x9b\xea\x6f\x9b\xa0\x2b\xc9\x61\x62\x72\x27\x2b\xcd\xdb\xa0\x25\x79\x65\xbc\x63\x6f\x51\x69\x66\x8c\xac\x8c\xaf\x6b\xef\x14\xd5\xa5\x2a\xf4\xae\x4d\x7f\x5b\x06\x44\x27\xbb\xbc\x6a\x38\x00\x9b\x40\x4d\xec\x37\x00\x7b\x72\xb9\xdf\xcb\xdb\x5b\x74\x3b\xc8\xe0\x38\xc0\x00\xba\xa1\x5f\x3d\xc7\x14\x8e\x47\x39\xac\x4f\xa7\x1f\x96\xe6\xf7\x3e\xc4\x14\x44\x6f\x6f\x37\xa7\x93\x98\x1d\x8c\xa5\xbf\x30\x30\x79\xd7\xa5\x98\xb7\xcb\x2c\xb9\x8e\xfa\x6d\x43\x37\xc1\x76\x4e\xf3\xf6\x09\xa7\x65\xb6\x73\x68\xe9\x7c\x3c\x26\x40\x05\xb4\x22\xbd\x35\x06\x99\x7f\xc7\x03\x9c\x4e\xf3\xb9\x47\xb0\x27\x96\xd7\xe4\x3e\xa0\x09\x18\xcf\x93\x00\x5a\xc6\xb3\xb8\xd9\xf3\xb9\x48\x97\x43\xb2\x88\xdc\x06\xfb\x3e\x60\x41\x0f\x29\x08\xb5\x14\xa8\xbf\xbc\x3f\x7d\x8e\x29\x08\x63\xe9\x5c\xbc\x9b\x9b\xdf\xde\x8d\xca\xb5\xeb\x65\x15\x74\xfa\xce\xe2\x47\xb4\x58\x63\x0c\x3d\x95\x0b\x6c\xe9\xce\x18\x76\x18\x26\xfd\xda\x1b\x3b\x83\x16\xf7\x76\x5a\xf7\x4d\xa2\xe6\x2e\xd9\xa8\xb1\x7b\x37\x77\x3e\x3f\x8c\x5d\x14\x0f\x16\xfb\xb5\xac\x35\xb9\x9f\xbd\x8b\xe8\xe2\xd4\x40\x39\x71\x63\xf5\x21\x85\x17\xce\x3b\x7c\xb1\x1e\x60\xdf\x68\x43\xf1\x90\xc2\x6a\x44\x62\xd0\x8e\x29\x76\x27\x1b\xac\x20\x5f\xad\x18\x2c\x39\xd4\xa1\x77\x3b\x3d\x2a\x24\xb9\xf2\xfb\x27\xaa\xdd\x59\x6f\x3e\x3d\x2e\xf7\xf2\x7f\x94\xdb\xa8\x81\x64\xbf\xcb\x69\x07\x94\x67\xc2\x7a\x9d\x93\x2b\xc5\xf8\x82\x3a\x83\xb1\x9a\x39\x13\x8d\x2e\x31\x19\x1d\xa0\x0b\xcf\xc4\xe0\x57\x93\x4b\x2a\xa4\xb2\x8a\x29\xbc\x5c\xad\x76\xd5\x7a\x7a\x82\x79\xac\x3a\xec\xfb\xf5\x25\x9f\xc2\xe2\xc3\x08\x6a\x4b\xa5\x4b\x28\x62\xcd\x29\x18\x74\x11\xc3\x68\x2a\xbc\x8b\x49\xa1\x6b\xb2\x87\x14\x58\x3b\x4e\x18\x03\x15\xa3\xf9\x7e\xcb\x91\x8a\x43\x62\x7a\xed\x2e\xa3\x27\x2a\xed\xbd\x36\xda\x8d\x6c\x2e\x19\x0c\x75\x98\x3e\x63\x0a\xaf\xb0\x5e\x4f\x78\xad\x43\x49\x2e\x89\xbe\x49\x21\xf9\x71\x69\x31\xde\xfa\x90\xc2\x77\x6f\x5e\xb7\xbf\x19\x5f\xd4\xfc\xa3\xd7\x4b\x4a\x39\x2a\xaa\xda\x53\x4c\xfa\xaa\x9c\x76\x43\xd7\x2d\x96\xe3\x75\x0c\x9c\xc4\x78\xe8\x45\x8f\x88\xeb\x65\xc0\x3c\x78\x3b\x56\x5c\x21\xc6\xcb\x69\x6b\x72\x77\xcf\xd2\x58\xbf\xcd\x0b\xab\x03\x4a\xe3\x6b\xa5\xef\xf5\x83\xb2\x74\xc7\xaa\xa3\xaf\xf7\xc8\xbe\x46\xf5\x5a\xfe\x24\x57\xca\xf0\x39\x2c\x6b\x72\xd2\x30\x0b\x35\xf4\xcd\xf1\xd8\xcd\x23\x63\xe9\x43\xd4\x91\xcc\x3b\x0a\xed\x5c\x79\xfe\x4c\x8a\x3b\x7f\xd5\x12\xea\x32\x82\xa9\x74\x60\x8c\x99\xb8\xf9\xf8\x4b\xf2\x46\x9c\x0f\x74\xe0\x60\xe6\xa0\x1d\xba\xdc\x07\x79\xff\x38\xea\x7a\xf9\xb6\xff\x25\xba\x2b\xf9\xe5\xd8\x91\xdb\x38\x27\xbf\x5e\xe3\xff\xf2\x45\x6b\x07\x6d\xb7\x9a\x26\xd5\x24\x87\x2c\x3f\x7f\x95\x22\xdf\xa8\xec\x24\xe8\x53\x75\xbf\xa4\xe9\xb7\xa4\xfd\x6c\xf5\xab\xf9\x13\xd4\xdf\xc9\x46\xf5\x33\x7b\xa3\xda\x3f\x26\xd7\x57\xff\x04\x00\x00\xff\xff\x7d\x6e\x65\x2c\xa0\x08\x00\x00")

func assetsUnversionedConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsUnversionedConsoleHtml,
		"assets/unversioned/console.html",
	)
}

func assetsUnversionedConsoleHtml() (*asset, error) {
	bytes, err := assetsUnversionedConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/unversioned/console.html", size: 2208, mode: os.FileMode(420), modTime: time.Unix(1576470932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10AlphaConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\xdf\x8b\xe3\x36\x10\x7e\xbf\xbf\x62\x50\x29\xf7\x52\x4b\xb9\xeb\x41\x0f\x27\x5e\x38\x5a\x4a\x4b\x5b\x38\xe8\x6d\x5f\x17\xad\x3c\xb6\x67\x4f\x1e\xb9\x1a\x25\xbb\x69\xc8\xff\x5e\xfc\x2b\x71\xb2\x07\x4b\x4b\x4b\x5e\xa4\xf9\xf5\xcd\x37\x23\x7f\xd9\x34\xa9\xf5\xe0\x2d\xd7\x85\x42\xce\xb6\xa2\x6e\x5e\x01\x6c\x1a\xb4\x65\x7f\x00\xd8\x78\xe2\xcf\x10\xd1\x17\x8a\x5c\x60\x05\x69\xdf\x61\xa1\xa8\xb5\x35\x9a\x8e\x6b\x05\x4d\xc4\xaa\x50\x4d\x4a\x9d\xe4\xc6\xd4\xd1\x76\xcd\x9f\x3e\x43\xae\x89\x31\x73\x25\xeb\xc6\xca\x36\x5a\x4d\xc1\xb8\xc0\x12\x3c\x1a\x2b\x82\x49\x8c\x0b\x6d\x1b\xd8\x50\x5b\x9b\xca\xee\xfa\xf2\x77\x75\x44\x64\x3d\xd4\x35\x53\x03\xe2\x22\x75\x69\xbc\x00\x3c\x12\x97\xe1\x51\xdf\xdd\x21\xef\xa0\x80\xc3\x64\x06\xb0\x1d\xfd\x14\x24\xe5\x70\x38\xe8\xe9\x7c\x3c\x7e\xb3\x74\x7f\x0c\x31\xe5\xa0\x46\x7f\x7f\x39\x1e\xd5\x39\xc0\x79\xfa\x03\xa3\x50\xe0\xa1\xc4\xf9\xba\xac\x52\xda\x64\x3f\x74\x74\x1b\xfd\x10\x74\xbe\x7e\x21\x68\x59\xed\xd2\xb4\x0c\x3e\x1c\x32\xa0\x0a\xfa\x21\x7d\x70\x0e\x45\x7e\xc1\x3d\x1c\x8f\xe7\xbe\x67\xe3\x48\xac\x6c\x89\x7f\x47\x17\x31\x5d\x16\x01\xf4\x82\x17\x79\xe7\xc8\x97\x32\xb9\x84\x6c\x91\xb9\x8d\xfe\x63\xc4\x8a\x9e\x72\x50\x66\x39\xa0\x71\x79\xbf\x85\x12\x73\x50\xce\xd3\xe5\xf0\x6e\x6f\x7f\xfe\x61\x9e\x5c\x7f\x5e\xa2\x20\xdb\x7b\x8f\x9f\xd0\x63\x8b\x29\x8e\x54\xae\x6c\xa7\x06\x8e\xeb\x71\xed\xe6\xbc\xf7\x8d\x99\xdf\xe3\xe6\x3e\x94\xfb\xf9\x5d\xa4\xbd\xc7\xf1\xac\x5b\x4b\xfc\x7d\xe0\x84\x9c\x4e\x4f\xa2\x24\xe9\xbc\xdd\xe7\xf0\x9a\x03\xe3\xeb\xf5\x64\x0e\x9d\x75\x94\xf6\x39\xac\x66\x4b\x8a\x96\x85\xd2\xb0\xab\xc9\x0b\xfa\xed\x4a\xc0\x13\xa3\x8d\x63\xd8\xf1\x19\x90\x96\x26\x3c\x7e\x01\xed\xde\x07\xf7\xf9\x39\xdc\x9b\x7f\x01\xb7\x31\x13\xc9\xf1\x56\xd2\x0e\xa8\x2c\x94\x0f\xb6\x24\xae\xd5\xfc\x4d\x0c\x0e\xe7\xad\x48\xa1\x3a\x5b\x63\x36\x07\xc0\x90\x5e\xa8\x29\xae\x25\xce\x1a\xa4\xba\x49\x39\xbc\x59\xad\x76\xcd\xfa\xf4\x51\x95\xa9\x19\x6c\x5f\xaf\xaf\xf9\x54\x1e\x9f\x66\xa3\xf5\x54\x73\x46\x09\x5b\xc9\xc1\x21\x27\x8c\xb3\xab\x0a\x9c\xb2\xca\xb6\xe4\xf7\x39\x88\x65\xc9\x04\x23\x55\xb3\xfb\x61\x2b\x89\xaa\x7d\xe6\xc6\xd9\x5d\x67\x9f\xa8\xf4\x7b\xed\x2c\xcf\x6c\xae\x19\x4c\x38\x42\x7f\x61\x0e\x6f\xb1\x5d\x9f\xec\xad\x8d\x35\x71\x96\x42\x97\x43\xf6\xed\xd2\xe3\x82\x0f\x31\x87\xaf\xde\xbf\xeb\x7f\x67\xfb\x02\xf3\xd7\x71\x5e\x5a\xeb\x79\xa2\xa6\xef\xe2\x34\x5f\x53\xd2\x6e\x7a\x75\x8b\xe3\xbc\x8e\x89\x93\x9a\x9b\x5e\xbc\x11\x75\xb3\x4c\x38\x4b\xe9\xc0\x4a\x1a\xc4\x74\xad\x9f\xae\xe4\x07\xd1\xce\x87\x6d\x59\x79\x1b\x51\xbb\xd0\x1a\xfb\x60\x9f\x8c\xa7\x7b\x31\x03\x7d\xfb\x88\x12\x5a\x34\xef\xf4\x77\x7a\x65\x9c\x5c\x9a\x75\x4b\xac\x9d\x88\x32\xff\x00\x56\x52\x88\xb6\x46\x5d\x87\x50\x7b\xb4\x1d\xc9\x00\x3c\x4a\x77\x76\x29\xea\x27\x19\xef\x65\x65\x50\xf2\x93\xae\x99\x9e\xfb\x00\x0e\xae\xb1\x51\x30\x15\xea\xf6\xd3\x8f\xd9\x7b\x75\xa9\xe6\x20\xd1\xfd\xf7\xe0\x3b\xe4\x32\x44\xfd\xf0\x1c\xfd\x66\x29\x27\xff\x73\x17\xc3\x08\x5e\xea\x61\x63\x46\x25\xdb\x98\xfe\x0f\xf8\xe6\xd5\xdf\x01\x00\x00\xff\xff\xad\xa2\xb0\x4a\x88\x07\x00\x00")

func assetsV10AlphaConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10AlphaConsoleHtml,
		"assets/v1.0-alpha/console.html",
	)
}

func assetsV10AlphaConsoleHtml() (*asset, error) {
	bytes, err := assetsV10AlphaConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0-alpha/console.html", size: 1928, mode: os.FileMode(420), modTime: time.Unix(1576470932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsV10ConsoleHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdd\x6b\x1c\x37\x10\x7f\xf7\x5f\x31\xa8\x94\xbc\x74\x25\x27\x0d\x34\xec\xdd\x1a\x42\x43\x69\xa1\x85\x80\xe3\xbe\x1a\x59\x9a\xdd\x1d\x47\x2b\x6d\x35\xba\xb3\x2f\xc7\xfd\xef\x65\x3f\x6f\xef\xec\x7c\x10\xc2\xbd\x8c\x7e\xf3\xa5\xdf\xcc\xec\xe8\xd6\x75\x6a\x1c\x38\xed\xab\x42\xa0\xcf\x36\x2c\xae\x2e\x00\xd6\x35\x6a\xdb\x09\x00\x6b\x47\xfe\x23\x44\x74\x85\x20\x13\xbc\x80\xb4\x6b\xb1\x10\xd4\xe8\x0a\x55\xeb\x2b\x01\x75\xc4\xb2\x10\x75\x4a\x2d\xe7\x4a\x55\x51\xb7\xf5\x7f\x2e\x43\x5f\x91\xc7\xcc\x58\x2f\x6b\xcd\x9b\xa8\x25\x05\x65\x82\xe7\xe0\x50\x69\x66\x4c\xac\x4c\x68\x9a\xe0\x15\x35\x95\x2a\xf5\xb6\x0b\x7f\x5b\x45\x44\x2f\xfb\xb8\x6a\xbc\x00\x9b\x48\x6d\x1a\x0e\x00\x0f\xe4\x6d\x78\x90\xb7\xb7\xe8\xb7\x50\xc0\x7e\x84\x01\x74\x4b\x7f\x06\x4e\x39\xec\xf7\x72\x94\x0f\x87\x5f\x96\xea\xf7\x21\xa6\x1c\xc4\xa0\xef\x0e\x87\x83\x38\x1a\x18\x47\xff\x62\x64\x0a\xbe\x0f\x71\x3c\x2e\xa3\x58\x9d\xf4\xdb\x96\x6e\xa2\xeb\x8d\x8e\xc7\x67\x8c\x96\xd1\x4e\xa1\xa5\xf1\x7e\x9f\x01\x95\x20\x89\xdf\xda\x86\xfc\x35\x9a\x88\xe9\x1a\x13\x1c\x0e\xb3\xcd\xb9\xae\x0f\x79\x0e\x9e\x06\x05\xf4\x16\xb2\x45\x8c\x4d\x74\xef\x23\x96\xf4\x98\x83\x50\x4b\xda\x43\x4b\xfe\x09\x16\x73\x10\xc6\xd1\x69\x49\x6e\x6e\xfe\x7a\x37\xd5\xa3\x93\x97\x59\xd0\xeb\x3b\x87\x1f\xd0\x61\x83\x29\xee\x7a\xb3\x33\x6c\x69\xce\x18\xb7\x18\xe7\xaa\x74\x7d\x38\x81\x16\xdd\x38\xac\x86\xd6\xab\x63\xef\xd7\x6a\x9a\xc9\xf5\x5d\xb0\xbb\x69\x36\xd2\xce\xe1\x20\xcb\x46\x93\xff\x3d\xf8\x84\x3e\xcd\x63\x61\x89\x5b\xa7\x77\x39\xbc\xf0\xc1\xe3\x8b\xd5\x08\x87\x56\x1b\x4a\xbb\x1c\x2e\x27\x24\x45\xed\x99\x52\x7f\xb3\x51\x0b\xf2\xd5\x25\x83\x23\x8f\x3a\x0e\x66\x87\x27\x89\x24\xd7\xe1\xe1\x99\x6c\x77\x2e\x98\x8f\x4f\xd3\xbd\xfc\x8e\x74\x6b\x35\x92\x1c\x4e\x96\xb6\x40\xb6\x10\x2e\x68\x4b\xbe\x12\xd3\x77\xd1\x2b\x8c\xd3\xcc\x85\x68\x75\x85\xd9\x64\x00\xbd\x7b\x21\x46\xbb\x86\x7c\x56\x23\x55\x75\xca\xe1\xe5\xe5\xe5\xb6\x5e\xcd\x1f\x96\x4d\x75\x8f\xfd\xbc\x3a\xe7\x53\x3a\x7c\x9c\x40\xed\xa8\xf2\x19\x25\x6c\x38\x07\x83\x3e\x61\x9c\x54\x65\xf0\x29\x2b\x75\x43\x6e\x97\x03\x6b\xcf\x19\x63\xa4\x72\x52\xdf\x6f\x38\x51\xb9\xcb\xcc\x50\xbb\x73\xef\x99\x4a\xd7\xd7\x56\xfb\x89\xcd\x39\x83\x31\x0f\xd3\x27\xcc\xe1\x15\x36\xab\x19\x6f\x74\xac\xc8\x67\x29\xb4\x39\x64\xbf\x2e\x35\x26\xb8\x10\x73\xf8\xe9\xcd\xeb\xee\x77\xc4\x17\x39\xff\x1e\xea\x25\xa5\x9c\x2a\xaa\xba\x5b\xcc\xf5\x55\x96\xb6\xe3\xd4\x2d\xc4\xa9\x1d\x23\x27\x31\x5d\x7a\x31\x23\xe2\x6a\xe9\x70\x5c\xa7\x3d\x2b\xae\x11\xd3\xf9\x0e\x35\xd6\xdf\xb3\x34\x2e\x6c\x6c\xe9\x74\x44\x69\x42\xa3\xf4\xbd\x7e\x54\x8e\xee\x58\xf5\xf4\xf5\x03\x72\x68\x50\xbd\x96\xbf\xc9\x4b\x65\xf8\x14\x96\x0d\x79\x69\x98\x85\x1a\xe7\x66\xbf\xef\xb7\x8c\x71\x74\x9d\x74\x22\xf3\x8e\x62\xb7\x61\xbe\x7e\x27\xc5\xbd\xbd\xea\x08\xf5\x11\xc1\xd4\x3a\x32\xa6\x42\xdc\x7c\xf8\x23\x7b\x23\x4e\xd7\x34\x70\x34\x47\xa7\x2d\x7a\x1b\xa2\xbc\x7f\xea\x75\xb5\xfc\xb6\x3f\xe3\xdd\xa7\xfc\xb2\xef\xc4\x0d\x1d\xe3\xb7\xf1\xf9\x9e\x77\xaa\x7b\x31\x7a\x69\xde\x54\x73\x39\x64\xf5\xe9\x9b\x2a\xf2\x83\xd2\xce\x05\x7d\x2e\xef\x97\x6a\xfa\x23\x69\x7f\x35\xfb\xc5\xf1\x09\x1a\x7a\xb2\x56\xc3\xce\x5e\xab\xee\xef\xc6\xd5\xc5\xff\x01\x00\x00\xff\xff\x2e\xc5\x14\x1f\x76\x08\x00\x00")

func assetsV10ConsoleHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsV10ConsoleHtml,
		"assets/v1.0/console.html",
	)
}

func assetsV10ConsoleHtml() (*asset, error) {
	bytes, err := assetsV10ConsoleHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/v1.0/console.html", size: 2166, mode: os.FileMode(420), modTime: time.Unix(1576678918, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/unversioned/console.html": assetsUnversionedConsoleHtml,
	"assets/v1.0-alpha/console.html": assetsV10AlphaConsoleHtml,
	"assets/v1.0/console.html": assetsV10ConsoleHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"unversioned": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsUnversionedConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10ConsoleHtml, map[string]*bintree{}},
		}},
		"v1.0-alpha": &bintree{nil, map[string]*bintree{
			"console.html": &bintree{assetsV10AlphaConsoleHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

